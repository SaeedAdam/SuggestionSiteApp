@page "/Create"
@attribute [Authorize]
@using SuggestionAppUI.Models
@using SuggestionAppUI.Components
@inject AuthenticationStateProvider authProvider
@inject ICategoryData CategoryData
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager NavManager


<h1>Make A Suggestion</h1>

<div>
    <div>
        <div @onclick="ClosePage">Close</div>
    </div>
    @if (_categories is not null)
    {
        <EditForm Model="_suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topic or technology you want to learn about.</div>
                <InputText id="suggestion-text" @bind-Value="_suggestion.Suggestion"/>
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose One Category.</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="_suggestion.CategoryId">
                        @foreach (var c in _categories)
                        {
                            <div>
                                <InputRadio Value="@c.CategoryId" id="@c.CategoryId"/>
                                <label for="@c.CategoryId">@c.CategoryName - @c.CategoryDescription</label>
                            </div>
                        }
                    </MyInputRadioGroup>
                </div>
            </div>
            <div>
                <label for="description">Description</label>
                <div>Briefly describe your suggestion.</div>
                <InputText id="description" @bind-Value="_suggestion.Description"/>
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    }
</div>


@code
{
    private CreateSuggestionModel _suggestion = new();
    public List<CategoryModel> _categories { get; set; }
    public UserModel _loggedInUser { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryData.GetAllCategories();
        _loggedInUser = await authProvider.GetUserFromAuth(UserData);
    }

    private void ClosePage()
    {
        NavManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        SuggestionModel s = new();
        s.Suggestion = _suggestion.Suggestion;
        s.ApprovedForRelease = false;
        s.Description = _suggestion.Description;
        s.Author = new BasicUserModel(_loggedInUser);
        s.Category = _categories.FirstOrDefault(c => c.CategoryId == _suggestion.CategoryId);

        if (s.Category is null)
        {
            _suggestion.CategoryId = "";
            return;
        }

        await SuggestionData.CreateSuggestion(s);
        _suggestion = new CreateSuggestionModel();
        ClosePage();
    }
}
