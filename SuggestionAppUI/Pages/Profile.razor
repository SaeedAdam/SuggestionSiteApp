@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager NavManager


<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

<div class="create-form mb-3">
    <h2 class="my-submission-heading">My Account</h2>
    <p id="edit-profile-text" class="my-submission-text">
        <a id="edit-profile-button" href="MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p>
</div>


@if (_approved?.Count > 0)
{
    <div class="create-form mb-3">
        <h2 class="my-submission-heading">Approved Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that are currently active.</p>
    
        @foreach (var s in _approved)
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    
    </div>
}
@if (_archived?.Count > 0)
{
    <div class="create-form mb-3">
        <h2 class="my-submission-heading">Archived Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were active but did not gain enough traction.</p>
    
        @foreach (var s in _archived)
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }      
        }
    
    </div>
}
@if (_pending?.Count > 0)
{
    <div class="create-form mb-3">
        <h2 class="my-submission-heading">Pending Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that have not yet been reviewed by the administrators.</p>
    
        @foreach (var s in _pending)
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }       
        }
    
    </div>
}
@if (_rejected?.Count > 0)
{
    <div class="create-form mb-3">
        <h2 class="my-submission-heading">Rejected Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>
    
        @foreach (var s in _rejected)
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    
    </div>
}




@code {
    private UserModel _loggedInUser;
    private List<SuggestionModel> _submissions;
    private List<SuggestionModel> _approved;
    private List<SuggestionModel> _archived;
    private List<SuggestionModel> _pending;
    private List<SuggestionModel> _rejected;

    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await authProvider.GetUserFromAuth(UserData);

        var results = await SuggestionData.GetUsersSuggestions(_loggedInUser.Id);

        if (_loggedInUser is not null && results is not null)
        {
            _submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            _approved = _submissions.Where(s => s.ApprovedForRelease && s.Archived == false && s.Rejected == false).ToList();
            _archived = _submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            _rejected = _submissions.Where(s => s.Rejected).ToList();
            _pending = _submissions.Where(s => s.Archived == false && s.ApprovedForRelease == false && s.Rejected == false).ToList();

        }
    }

    private void ClosePage()
    {
        NavManager.NavigateTo("/");
    }

}
